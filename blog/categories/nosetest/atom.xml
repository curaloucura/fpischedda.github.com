<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nosetest | Minasss Projects Dump Blog]]></title>
  <link href="http://html5dev.altervista.org//blog/categories/nosetest/atom.xml" rel="self"/>
  <link href="http://html5dev.altervista.org//"/>
  <updated>2013-03-21T15:34:48+01:00</updated>
  <id>http://html5dev.altervista.org//</id>
  <author>
    <name><![CDATA[Francesco Pischedda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying TDD (Test Driven Development)]]></title>
    <link href="http://html5dev.altervista.org//posts/2013/02/03/trying-tdd/"/>
    <updated>2013-02-03T16:44:00+01:00</updated>
    <id>http://html5dev.altervista.org//posts/2013/02/03/trying-tdd</id>
    <content type="html"><![CDATA[<p>In every software development studio where I've been employed I've tryed to
add something to the development pipeline not only because I love the work I do
but more often than desired these companies lacked something (they all would
have scored a -12 on <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Spolsky check
list</a>).</p>

<p>Some times I've had a plain victory some other times I've had to fight to even
get the company to listen me. Obviously that was their fault...in my head!
Surely I have done something wrong when I was trying to open their minds.
There was a time when a particular client asked explicitly for the use of the
MVC development pattern where internally the accepted solution was the
copy-paste-pray approach. That same company have never growed because of this
senseless approach to development but I didn't care, I've moved along and my
life gained a lot of quality points.
In a next gig everything started smoother but I missed something and for
example I was not able to convince them to use git, them an external contractor
pretended the use of git on <a href="https://github.com/">github</a> and so git it was.</p>

<p>I want to make a clear point, I don't usually say "you have to use that
tool/framework/service" because I want that and only that but because I think
that it is the right tool for the job! And this fact drives me crazy because it
seems that some people are unable to understand what's best fer their own good!</p>

<p>Oooook let's put the rant apart...what was the post title again? Oh yeah, TDD!
Well TDD fits perfectly in the pool of the "ignored suggestions" but this time
it's different because, even in my personal projects, I've never used this
methodology seriously. So I've decided to add tests to my preferred pet project
and I am VERY VERY satisfied! Maybe this time I'll have arguments on my side
when I'll try to suggest TDD to someone.</p>

<h2>Why have I adopted TDD?</h2>

<p>Well, I'm developing <a href="https://github.com/fpischedda/lsystem">this little
creature</a> that for a certain period of
time were not receiving my attention, but fortunately I said to myself "what
the hell I don't even know what part of this thing works" so I started to add
tests. I started to look at the code, there was something that had to be
changed, something that had to be deleted and so on so I've started to pick one
module at a time, reimagine the API and write tests or fix the code and write
tests to document the API usage.</p>

<p>Now that I'm doing a couple of commits a day, changing how things works,
refactoring code etc etc I feel that my code is always in a stable state even if
I don't touch an old module for a week, I simply run the tests and see if/what
something is broken and where is broken. Even for small projects like mine you
can gain benefits imagine when building complex or big systems!</p>

<h2>Benefits</h2>

<p>I'll try to list some of the benefits of this methodology:</p>

<ul>
<li>the code you write for the tests can be used as reference</li>
<li>you know in what state your project is, what works and what don't</li>
<li>you know exactly where you code is broken</li>
<li>you feel better when it is needed to do a major change to the code base</li>
<li>if you are outsourcing some part of your project you can have an immediate
taste of the quality of the code produced</li>
</ul>


<p>There are obviously other benefits but those are what that I've detected during
my little experiment</p>

<h2>Cons</h2>

<ul>
<li>you have to produce more code, but it's a well payed effort</li>
<li>you tell explicitly that you don't trust your code :)</li>
<li>you'll find people that trust any code from anywhere that will lought in
front of you...but then this people will spend nights fixing the system
instead of caring about their loved ones :)</li>
</ul>


<h2>What to use</h2>

<p>What to use as a base for your testing environment it's up to you, your
development platform, the language, the test framework etc...
Personally I'm developing my project with python (>= 2.7.3) and I'm using
<a href="http://pypi.python.org/pypi/nose/">nosetests</a>, no needs to inherit classes,
just write functions with "test" in their names and they will be detected by
the framework.</p>

<h2>Conclusions</h2>

<p>TDD is a tool that will help you write better code, once you want to test some
piece of code it make you think how you can separate it in modules to help you
write tests and you will get a more modular and trustworty code base. The nice
thing is that anyone have to trust this words, just try it and see, it's worth
it.</p>
]]></content>
  </entry>
  
</feed>
